name: Analyzers Build

on:
  push:
    branches:
      - '**'
    paths:
      - 'FrendsTaskAnalyzers/**'

permissions:
  contents: read

env:
  DOTNET_NOLOGO: true
  DOTNET_VERSION: '8.0.x'
  PROJECT_DIRECTORY: 'FrendsTaskAnalyzers/FrendsTaskAnalyzers'

defaults:
  run:
    working-directory: 'FrendsTaskAnalyzers'

jobs:
  lint:
    name: Lint
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4.2.2

      - name: Setup .NET SDK
        uses: actions/setup-dotnet@v4.3.1
        with:
          dotnet-version: ${{ env.DOTNET_VERSION }}

      - name: Restore
        run: dotnet restore --locked-mode

      - name: Lint
        run: dotnet format --no-restore --verify-no-changes

  build:
    name: Build
    needs: lint
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4.2.2

      - name: Setup .NET SDK
        uses: actions/setup-dotnet@v4.3.1
        with:
          dotnet-version: ${{ env.DOTNET_VERSION }}

      - name: Restore
        run: dotnet restore --locked-mode

      - name: Build
        run: dotnet build --no-restore --configuration Release

      - name: Pack
        run: dotnet pack --no-restore --no-build --configuration Release

      - name: Upload artifact
        uses: actions/upload-artifact@v4.6.2
        with:
          name: nuget-packages
          path: '${{ env.PROJECT_DIRECTORY }}/bin/Release/*.nupkg'
          retention-days: 7

  test:
    name: Test
    needs: build
    runs-on: ubuntu-latest
    steps:
      - name: Install xmlstarlet
        env:
          DEBIAN_FRONTEND: noninteractive
        run: |
          sudo apt-get update
          sudo apt-get install --no-install-recommends -y xmlstarlet
        working-directory: '.'

      - name: Checkout
        uses: actions/checkout@v4.2.2

      - name: Setup .NET SDK
        uses: actions/setup-dotnet@v4.3.1
        with:
          dotnet-version: ${{ env.DOTNET_VERSION }}

      - name: Restore
        run: dotnet restore --locked-mode

      - name: Build
        run: dotnet build --no-restore --configuration Release

      - name: Test
        run: dotnet test --no-build --configuration Release --collect:"XPlat Code Coverage"

      - name: Test coverage
        env:
          REPOSITORY: ${{ github.repository }}
          BRANCH: ${{ github.ref_name }}
          BADGE_SERVICE_API_KEY: ${{ secrets.BADGE_SERVICE_API_KEY }}
        run: |
          file=$(find . -name 'coverage.cobertura.xml' 2>/dev/null | head -n 1)
          lineRate=$(xmlstarlet sel -t -v '//coverage/@line-rate' "$file")
          lineRatePct=$(printf "%.0f" $(echo "$lineRate * 100" | bc -l))
          if [ $lineRatePct -lt 80 ]; then
            echo "## Test coverage failed :x:" >> $GITHUB_STEP_SUMMARY
            echo "**Line coverage:** $lineRatePct% | **Required:** 80%" >> $GITHUB_STEP_SUMMARY
            exit 1
          else
            echo "## Test coverage passed :white_check_mark:" >> $GITHUB_STEP_SUMMARY
            echo "**Line coverage:** $lineRatePct%" >> $GITHUB_STEP_SUMMARY
            echo "coverage=$lineRatePct" >> $GITHUB_OUTPUT
          fi
          badgeKey="$REPOSITORY/FrendsTaskAnalyzers|$BRANCH"
          json=$(jq -nc \
            --arg key "$badgeKey" \
            --arg displayName "Coverage" \
            --arg value "$lineRatePct%" \
            '{key: $key, displayName: $displayName, value: $value}')
          curl \
            -X POST \
            -H "Content-Type: application/json" \
            -H "x-api-key: $BADGE_SERVICE_API_KEY" \
            -d "$json" \
            https://app-github-custom-badges.azurewebsites.net/Badge
