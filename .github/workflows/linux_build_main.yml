name: linux_build_main.yml

on:
  workflow_call:
    inputs:
      env_var_name_1:
        required: false
        type: string
      env_var_name_2:
        required: false
        type: string
      env_var_name_3:
        required: false
        type: string
      env_var_name_4:
        required: false
        type: string
      env_var_name_5:
        required: false
        type: string
      env_var_name_6:
        required: false
        type: string
      env_var_name_7:
        required: false
        type: string
      env_var_name_8:
        required: false
        type: string
      workdir:
        required: false
        type: string
      prebuild_command:
        required: false
        type: string
    secrets:
      env_var_value_1:
        required: false
      env_var_value_2:
        required: false
      env_var_value_3:
        required: false
      env_var_value_4:
        required: false
      env_var_value_5:
        required: false
      env_var_value_6:
        required: false
      env_var_value_7:
        required: false
      env_var_value_8:
        required: false
      badge_service_api_key:
        required: true
      build_time_nuget_feed_url:
        required: false
      build_time_nuget_feed_api_key:
        required: false

jobs:
  build:
    name: Build main branch
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v1
    
    ###############################
    # SETUP DOTNET                #
    ###############################
    # When setting up dotnet, we need to check if a custom nuget feed is used
    # However in GitHub Actions, in 'if' statements we cannot refer to 'secret' values, thus
    # we need to use a small script to check if the secret is defined or not and then set an
    # output to either true or false.
    - name: Check for custom feed URL
      id: check_for_build_time_feed
      shell: pwsh
      run: |
        if ("${{ secrets.build_time_nuget_feed_url }}" -eq "")
        { "Custom feed URL missing"; echo "build_time_nuget_feed_defined=false" >> $env:GITHUB_OUTPUT }
        else 
        { "Custom feed URL present"; echo "build_time_nuget_feed_defined=true" >> $env:GITHUB_OUTPUT }

    - uses: actions/setup-dotnet@v1
      name: Setup dotnet (no custom feed)
      if: ${{ steps.check_for_build_time_feed.outputs.build_time_nuget_feed_defined == 'false' }}
      with:
        dotnet-version: '6.0.x'
    
    # If a custom nuget feed is used, we need to add it when setting up dotnet
    - uses: actions/setup-dotnet@v1
      name: Setup dotnet (with custom feed)
      if: ${{ steps.check_for_build_time_feed.outputs.build_time_nuget_feed_defined == 'true' }}
      with:
        dotnet-version: '6.0.x'
        source-url: ${{ secrets.build_time_nuget_feed_url }}
      env:
        NUGET_AUTH_TOKEN: ${{ secrets.build_time_nuget_feed_api_key }} 

    ###############################
    # SETUP ENVIRONMENT IF NEEDED #
    ###############################
    - name: Set env var 1
      if: ${{ inputs.env_var_name_1 != '' }}
      run: |
        echo "::add-mask::${{ secrets.env_var_value_1 }}"
        echo "${{ inputs.env_var_name_1 }}=${{ secrets.env_var_value_1 }}" >> $GITHUB_ENV
        
    - name: Set env var 2
      if: ${{ inputs.env_var_name_2 != '' }}
      run: |
        echo "::add-mask::${{ secrets.env_var_value_2 }}"
        echo "${{ inputs.env_var_name_2 }}=${{ secrets.env_var_value_2 }}" >> $GITHUB_ENV
        
    - name: Set env var 3
      if: ${{ inputs.env_var_name_3 != '' }}
      run: |
        echo "::add-mask::${{ secrets.env_var_value_3 }}"
        echo "${{ inputs.env_var_name_3 }}=${{ secrets.env_var_value_3 }}" >> $GITHUB_ENV
        
    - name: Set env var 4
      if: ${{ inputs.env_var_name_4 != '' }}
      run: |
        echo "::add-mask::${{ secrets.env_var_value_4 }}"
        echo "${{ inputs.env_var_name_4 }}=${{ secrets.env_var_value_4 }}" >> $GITHUB_ENV

    - name: Set env var 5
      if: ${{ inputs.env_var_name_5 != '' }}
      run: |
        echo "::add-mask::${{ secrets.env_var_value_5 }}"
        echo "${{ inputs.env_var_name_5 }}=${{ secrets.env_var_value_5 }}" >> $GITHUB_ENV

    - name: Set env var 6
      if: ${{ inputs.env_var_name_6 != '' }}
      run: |
        echo "::add-mask::${{ secrets.env_var_value_6 }}"
        echo "${{ inputs.env_var_name_6 }}=${{ secrets.env_var_value_6 }}" >> $GITHUB_ENV

    - name: Set env var 7
      if: ${{ inputs.env_var_name_7 != '' }}
      run: |
        echo "::add-mask::${{ secrets.env_var_value_7 }}"
        echo "${{ inputs.env_var_name_7 }}=${{ secrets.env_var_value_7 }}" >> $GITHUB_ENV

    - name: Set env var 8
      if: ${{ inputs.env_var_name_8 != '' }}
      run: |
        echo "::add-mask::${{ secrets.env_var_value_8 }}"
        echo "${{ inputs.env_var_name_8 }}=${{ secrets.env_var_value_8 }}" >> $GITHUB_ENV

    - name: Set working directory if provided
      if: ${{ inputs.workdir != '' }}
      run: |
        echo "workdir=${{ inputs.workdir }}" >> $GITHUB_ENV

    - name: Set working directory to default if not provided
      if: ${{ inputs.workdir == '' }}
      run: |
        echo "workdir=." >> $GITHUB_ENV

    ###############################
    # Install required tools      #
    ###############################
    - name: Install tools
      run: |
        sudo apt-get update
        sudo apt-get install xmlstarlet -y
        
    ###############################
    # Run prebuild command        #
    ###############################
    - name: Run prebuild command
      if: ${{ inputs.prebuild_command != '' }}
      run: ${{ inputs.prebuild_command }}
      working-directory: "${{ env.workdir }}"
      
    ###############################
    # Build, test, report results #
    ###############################
    - name: Build
      run: dotnet build
      working-directory: "${{ env.workdir }}"
    
    - name: Test
      run: dotnet test --collect:"XPlat Code Coverage"
      working-directory: "${{ env.workdir }}"

    - name: Check Code Coverage
      id: get_line_rate
      run: |
        report=$(sudo find . -name "coverage.cobertura.xml")
        cp $report .
        coverage=$(xmlstarlet sel -t -v '//coverage/@line-rate' coverage.cobertura.xml)
        covPercent=$(echo "$coverage * 100" | bc -l)
        coverageInt=$(printf "%.0f" $covPercent)
        if test $coverageInt -lt 80 
        then
          echo "Test coverage $covPercent% was not in the tolerance 80%"
          echo "The Code Check failed! :x:" >> $GITHUB_STEP_SUMMARY
          echo "## Test coverage $covPercent% was not in the tolerance 80% :thumbsdown:" >> $GITHUB_STEP_SUMMARY
          exit 1
        else
          echo "The Code Check passed :raised_hands:" >> $GITHUB_STEP_SUMMARY
          echo "## Test coverage $covPercent% :thumbsup:" >> $GITHUB_STEP_SUMMARY
        fi

    - name: Pack release version of task
      run: dotnet pack --configuration Release --include-source
      working-directory: "${{ env.workdir }}"
      
    - name: Save coverage results
      id: vars
      run: |
        badgeKey="${{ github.repository }}|${{ github.ref_name }}"
        apiKey="${{ secrets.badge_service_api_key }}"
        if [ "${{ env.workdir }}" != '.' ]; then
          badgeKey="${{ github.repository }}/${{ env.workdir }}|${{ github.ref_name }}"
        fi
        pathToCoverageFile=$(sudo find . -name "coverage.cobertura.xml")
        mv $pathToCoverageFile .
        coverage=$(xmlstarlet sel -t -v '//coverage/@line-rate' coverage.cobertura.xml)
        covPercent=$(echo "$coverage * 100" | bc -l)
        coverageInt=$(printf "%.0f" $covPercent)
        json="{\"key\":\"$badgeKey\",\"displayName\":\"Coverage\",\"value\":\"$coverageInt%\"}"
        curl -X POST -H "x-api-key: $apiKey" -H "Content-Type: application/json" -d $json https://app-github-custom-badges.azurewebsites.net/Badge
      working-directory: "${{ env.workdir }}"

    ### WE ARE NOT PUSHING / CREATING RELEASE IMMEDIATELY ###
    ### USE release.yml TO CREATE THE RELEASE AND PUSH    ###
