name: linux_build_main.yml

on:
  workflow_call:
    inputs:
      env_var_name_1:
        required: false
        type: string
      env_var_name_2:
        required: false
        type: string
      env_var_name_3:
        required: false
        type: string
      env_var_name_4:
        required: false
        type: string
      env_var_name_5:
        required: false
        type: string
      env_var_name_6:
        required: false
        type: string
      env_var_name_7:
        required: false
        type: string
      env_var_name_8:
        required: false
        type: string
      workdir:
        required: false
        type: string
        default: '.'
      prebuild_command:
        required: false
        type: string
      dotnet_version:
        required: false
        type: string
        default: '6.0.x'
        description: 'Version of .NET SDK to use, e.g. 6.0.x, 8.0.x'
      strict_analyzers:
        required: false
        type: boolean
        default: false
    secrets:
      env_var_value_1:
        required: false
      env_var_value_2:
        required: false
      env_var_value_3:
        required: false
      env_var_value_4:
        required: false
      env_var_value_5:
        required: false
      env_var_value_6:
        required: false
      env_var_value_7:
        required: false
      env_var_value_8:
        required: false
      badge_service_api_key:
        required: true
      build_time_nuget_feed_url:
        required: false
      build_time_nuget_feed_api_key:
        required: false

jobs:
  build:
    name: Build on ubuntu-22.04
    runs-on: ubuntu-22.04
    defaults:
      run:
        working-directory: ${{ inputs.workdir }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4.2.2

      # An alias is needed so that docker-compose works with the dash in between.
      - name: Create alias for docker-compose
        run: |
          sudo touch /usr/bin/docker-compose
          sudo echo 'docker compose --compatibility "$@"' | sudo tee /usr/bin/docker-compose
          sudo chmod +x /usr/bin/docker-compose

      ###############################
      # SETUP DOTNET                #
      ###############################
      # When setting up dotnet, we need to check if a custom nuget feed is used
      # However in GitHub Actions, in 'if' statements we cannot refer to 'secret' values, thus
      # we need to use a small script to check if the secret is defined or not and then set an
      # output to either true or false.
      - id: check_build_time_feed
        name: Check if custom NuGet feed is set
        run: |
          if [ -z "${{ secrets.build_time_nuget_feed_url }}" ]; then
            echo "defined=false" >> $GITHUB_OUTPUT
          else
            echo "defined=true" >> $GITHUB_OUTPUT
          fi

      - if: ${{ steps.check_build_time_feed.outputs.defined == 'false' }}
        name: Setup .NET SDK
        uses: actions/setup-dotnet@v4.3.1
        with:
          dotnet-version: ${{ inputs.dotnet_version }}

      # If a custom nuget feed is used, we need to add it when setting up dotnet
      - if: ${{ steps.check_build_time_feed.outputs.defined == 'true' }}
        name: Setup .NET SDK (with custom feed)
        uses: actions/setup-dotnet@v4.3.1
        with:
          dotnet-version: ${{ inputs.dotnet_version }}
          source-url: ${{ secrets.build_time_nuget_feed_url }}
        env:
          NUGET_AUTH_TOKEN: ${{ secrets.build_time_nuget_feed_api_key }}

      ###############################
      # SETUP ENVIRONMENT IF NEEDED #
      ###############################
      - if: ${{ inputs.env_var_name_1 != '' }}
        name: Set env var 1
        run: |
          echo "::add-mask::${{ secrets.env_var_value_1 }}"
          echo "${{ inputs.env_var_name_1 }}=${{ secrets.env_var_value_1 }}" >> $GITHUB_ENV

      - if: ${{ inputs.env_var_name_2 != '' }}
        name: Set env var 2
        run: |
          echo "::add-mask::${{ secrets.env_var_value_2 }}"
          echo "${{ inputs.env_var_name_2 }}=${{ secrets.env_var_value_2 }}" >> $GITHUB_ENV

      - if: ${{ inputs.env_var_name_3 != '' }}
        name: Set env var 3
        run: |
          echo "::add-mask::${{ secrets.env_var_value_3 }}"
          echo "${{ inputs.env_var_name_3 }}=${{ secrets.env_var_value_3 }}" >> $GITHUB_ENV

      - if: ${{ inputs.env_var_name_4 != '' }}
        name: Set env var 4
        run: |
          echo "::add-mask::${{ secrets.env_var_value_4 }}"
          echo "${{ inputs.env_var_name_4 }}=${{ secrets.env_var_value_4 }}" >> $GITHUB_ENV

      - if: ${{ inputs.env_var_name_5 != '' }}
        name: Set env var 5
        run: |
          echo "::add-mask::${{ secrets.env_var_value_5 }}"
          echo "${{ inputs.env_var_name_5 }}=${{ secrets.env_var_value_5 }}" >> $GITHUB_ENV

      - if: ${{ inputs.env_var_name_6 != '' }}
        name: Set env var 6
        run: |
          echo "::add-mask::${{ secrets.env_var_value_6 }}"
          echo "${{ inputs.env_var_name_6 }}=${{ secrets.env_var_value_6 }}" >> $GITHUB_ENV

      - if: ${{ inputs.env_var_name_7 != '' }}
        name: Set env var 7
        run: |
          echo "::add-mask::${{ secrets.env_var_value_7 }}"
          echo "${{ inputs.env_var_name_7 }}=${{ secrets.env_var_value_7 }}" >> $GITHUB_ENV

      - if: ${{ inputs.env_var_name_8 != '' }}
        name: Set env var 8
        run: |
          echo "::add-mask::${{ secrets.env_var_value_8 }}"
          echo "${{ inputs.env_var_name_8 }}=${{ secrets.env_var_value_8 }}" >> $GITHUB_ENV

      ###############################
      # Install required tools      #
      ###############################
      - name: Install xmlstarlet
        env:
          DEBIAN_FRONTEND: noninteractive
        run: |
          sudo apt-get update
          sudo apt-get install --no-install-recommends -y xmlstarlet

      - name: Enable global .NET tools
        run: |
          echo ~/.dotnet/tools >> $GITHUB_PATH

      - name: Install Roslynator
        run: |
          dotnet tool install --global Roslynator.DotNet.Cli

      - name: Download FrendsTaskAnalyzers
        env:
          GITHUB_TOKEN: ${{ github.token }}
        run: |
          mkdir .analyzers
          latest=$(gh release list \
            --repo 'FrendsPlatform/FrendsTasks' \
            --json tagName \
            --exclude-drafts \
            --exclude-pre-releases \
            --jq '[.[] | select(.tagName | startswith("analyzers-")) | .tagName] | first')
          gh release download "$latest" \
            --repo 'FrendsPlatform/FrendsTasks' \
            --dir '.analyzers' \
            --pattern '*.nupkg'
          unzip -o -j -d '.analyzers' '.analyzers/*.nupkg' '*.dll'

      ###############################
      # Run prebuild command        #
      ###############################
      - if: ${{ inputs.prebuild_command != '' }}
        name: Run prebuild command
        run: ${{ inputs.prebuild_command }}

      ###############################
      # Build, test, report results #
      ###############################
      - name: Build
        run: dotnet build

      - name: Write .editorconfig
        run: |
          file=$(find . -name 'FrendsTaskMetadata.json' 2>/dev/null)
          methods=$(jq -r '[.Tasks[].TaskMethod] | join(";")' "$file")
          cat <<EOF >> .editorconfig
          [*.cs]
          frends_task_analyzers.task_methods = $methods
          EOF

      - name: Format
        run: |
          dotnet format \
            --verify-no-changes \
            --verbosity detailed
        continue-on-error: ${{ !inputs.strict_analyzers }}

      - name: Lint
        run: |
          roslynator analyze \
            --analyzer-assemblies '.analyzers' \
            --verbosity detailed
        continue-on-error: ${{ !inputs.strict_analyzers }}

      - if: ${{ always() }}
        name: Cleanup after analyzers
        run: |
          git restore .editorconfig
          rm -rf '.analyzers'
        continue-on-error: true

      - name: Test
        run: dotnet test --collect:"XPlat Code Coverage"

      - id: code_coverage
        name: Check code coverage
        run: |
          file=$(find . -name 'coverage.cobertura.xml' 2>/dev/null)
          lineRate=$(xmlstarlet sel -t -v '//coverage/@line-rate' $file)
          lineRatePct=$(printf "%.0f" $(echo "$lineRate * 100" | bc -l))
          if [ $lineRatePct -lt 80 ]; then
            echo "## Test coverage failed :x:" >> $GITHUB_STEP_SUMMARY
            echo "**Line coverage:** $lineRatePct% | **Required:** 80%" >> $GITHUB_STEP_SUMMARY
            exit 1
          else
            echo "## Test coverage passed :white_check_mark:" >> $GITHUB_STEP_SUMMARY
            echo "**Line coverage:** $lineRatePct%" >> $GITHUB_STEP_SUMMARY
            echo "coverage=$lineRatePct" >> $GITHUB_OUTPUT
          fi

      - name: Pack
        run: dotnet pack --configuration Release --include-source

      - name: Save coverage report
        run: |
          badgeKey="${{ github.repository }}|${{ github.ref_name }}"
          if [ "${{ inputs.workdir }}" != '.' ]; then
            badgeKey="${{ github.repository }}/${{ inputs.workdir }}|${{ github.ref_name }}"
          fi
          json=$(jq -nc \
            --arg key "$badgeKey" \
            --arg displayName "Coverage" \
            --arg value "${{ steps.code_coverage.outputs.coverage }}%" \
            '{key: $key, displayName: $displayName, value: $value}')
          curl \
            -X POST \
            -H "Content-Type: application/json" \
            -H "x-api-key: ${{ secrets.BADGE_SERVICE_API_KEY }}" \
            -d $json \
            https://app-github-custom-badges.azurewebsites.net/Badge

    ### WE ARE NOT PUSHING / CREATING RELEASE IMMEDIATELY ###
    ### USE release.yml TO CREATE THE RELEASE AND PUSH    ###
