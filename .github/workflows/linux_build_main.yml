name: linux_build_main.yml

on:
  workflow_call:
    inputs:
      env_var_name_1:
        required: false
        type: string
      env_var_name_2:
        required: false
        type: string
      env_var_name_3:
        required: false
        type: string
      env_var_name_4:
        required: false
        type: string
      workdir:
        required: false
        type: string
      prebuild_command:
        required: false
        type: string
    secrets:
      env_var_value_1:
        required: false
      env_var_value_2:
        required: false
      env_var_value_3:
        required: false
      env_var_value_4:
        required: false
      badge_service_api_key:
        required: true

jobs:
  build:
    name: Build main branch
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v1
    - uses: actions/setup-dotnet@v1
      with:
        dotnet-version: '6.0.x'

    ###############################
    # SETUP ENVIRONMENT IF NEEDED #
    ###############################
    - name: Set env var 1
      if: ${{ inputs.env_var_name_1 != '' }}
      run: |
        echo "::add-mask::${{ secrets.env_var_value_1 }}"
        echo "${{ inputs.env_var_name_1 }}=${{ secrets.env_var_value_1 }}" >> $GITHUB_ENV
        
    - name: Set env var 2
      if: ${{ inputs.env_var_name_2 != '' }}
      run: |
        echo "::add-mask::${{ secrets.env_var_value_2 }}"
        echo "${{ inputs.env_var_name_2 }}=${{ secrets.env_var_value_2 }}" >> $GITHUB_ENV
        
    - name: Set env var 3
      if: ${{ inputs.env_var_name_3 != '' }}
      run: |
        echo "::add-mask::${{ secrets.env_var_value_3 }}"
        echo "${{ inputs.env_var_name_3 }}=${{ secrets.env_var_value_3 }}" >> $GITHUB_ENV
        
    - name: Set env var 4
      if: ${{ inputs.env_var_name_4 != '' }}
      run: |
        echo "::add-mask::${{ secrets.env_var_value_4 }}"
        echo "${{ inputs.env_var_name_4 }}=${{ secrets.env_var_value_4 }}" >> $GITHUB_ENV

    - name: Set working directory if provided
      if: ${{ inputs.workdir != '' }}
      run: |
        echo "workdir=${{ inputs.workdir }}" >> $GITHUB_ENV

    - name: Set working directory to default if not provided
      if: ${{ inputs.workdir == '' }}
      run: |
        echo "workdir=." >> $GITHUB_ENV

    ###############################
    # Install required tools      #
    ###############################
    - name: Install tools
      run: |
        sudo apt-get update
        sudo apt-get install xmlstarlet -y
        
    ###############################
    # Run prebuild command        #
    ###############################
    - name: Run prebuild command
      if: ${{ inputs.prebuild_command != '' }}
      run: ${{ inputs.prebuild_command }}
      working-directory: "${{ env.workdir }}"
      
    ###############################
    # Build, test, report results #
    ###############################
    - name: Build
      run: dotnet build
      working-directory: "${{ env.workdir }}"
    
    - name: Test
      run: dotnet test --collect:"XPlat Code Coverage"
      working-directory: "${{ env.workdir }}"
      
    - name: Pack release version of task
      run: dotnet pack --configuration Release --include-source
      working-directory: "${{ env.workdir }}"
      
    - name: Save coverage results
      id: vars
      shell: pwsh
      run: |
        badgeKey="${{ github.repository }}|${{ github.ref_name }}"
        apiKey="${{ secrets.badge_service_api_key }}"
        if [ "${{ env.workdir }}" != '.' ]; then
          badgeKey="${{ github.repository }}/${{ env.workdir }}|${{ github.ref_name }}"
        fi
        pathToCoverageFile=$(find . -name "coverage.cobertura.xml")
        mv $pathToCoverageFile .
        coverage=$(xmlstarlet sel -t -v '//coverage/@line-rate' coverage.cobertura.xml)
        coverage=${coverage/./,}
        coverageInt="$((100 * $coverage))"
        json='{"key":"$badgeKey","displayName":"Coverage","value":"$coverageInt%"}'
        curl -X POST -H "x-api-key: $apiKey" -H "Content-Type: application/json" -d $json https://app-github-custom-badges.azurewebsites.net/Badge
      working-directory: "${{ env.workdir }}"

    ### WE ARE NOT PUSHING / CREATING RELEASE IMMEDIATELY ###
    ### USE release.yml TO CREATE THE RELEASE AND PUSH    ###
