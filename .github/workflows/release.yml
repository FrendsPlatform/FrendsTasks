name: release.yml

on:
  workflow_call:
    inputs:
      env_var_name_1:
        required: false
        type: string
      env_var_name_2:
        required: false
        type: string
      env_var_name_3:
        required: false
        type: string
      env_var_name_4:
        required: false
        type: string
      workdir:
        required: false
        type: string
      prebuild_command:
        required: false
        type: string
    secrets:
      env_var_value_1:
        required: false
      env_var_value_2:
        required: false
      env_var_value_3:
        required: false
      env_var_value_4:
        required: false
      feed_api_key:
        required: true


env:
  azure_artifacts_feed_url: https://pkgs.dev.azure.com/frends-platform/frends-tasks/_packaging/main/nuget/v3/index.json

jobs:
  build:
    name: ReleaseTheTask
    runs-on: windows-latest
    
    steps:
    - uses: actions/checkout@v1
    - uses: actions/setup-dotnet@v1
      with:
        dotnet-version: '6.0.x'
        source-url: ${{ env.azure_artifacts_feed_url }}
      env:
        NUGET_AUTH_TOKEN: ${{ secrets.feed_api_key }} 

    ###############################
    # SETUP ENVIRONMENT IF NEEDED #
    ###############################
    - name: Set env var 1
      if: ${{ inputs.env_var_name_1 != '' }}
      run: |
        echo "::add-mask::${{ secrets.env_var_value_1 }}"
        echo "${{ inputs.env_var_name_1 }}=${{ secrets.env_var_value_1 }}" >> $env:GITHUB_ENV
        
    - name: Set env var 2
      if: ${{ inputs.env_var_name_2 != '' }}
      run: |
        echo "::add-mask::${{ secrets.env_var_value_2 }}"
        echo "${{ inputs.env_var_name_2 }}=${{ secrets.env_var_value_2 }}" >> $env:GITHUB_ENV
        
    - name: Set env var 3
      if: ${{ inputs.env_var_name_3 != '' }}
      run: |
        echo "::add-mask::${{ secrets.env_var_value_3 }}"
        echo "${{ inputs.env_var_name_3 }}=${{ secrets.env_var_value_3 }}" >> $env:GITHUB_ENV
        
    - name: Set env var 4
      if: ${{ inputs.env_var_name_4 != '' }}
      run: |
        echo "::add-mask::${{ secrets.env_var_value_4 }}"
        echo "${{ inputs.env_var_name_4 }}=${{ secrets.env_var_value_4 }}" >> $env:GITHUB_ENV
    - name: Set working directory if provided
      if: ${{ inputs.workdir != '' }}
      run: |
        echo "workdir=${{ inputs.workdir }}" >> $env:GITHUB_ENV
    - name: Set working directory to default if not provided
      if: ${{ inputs.workdir == '' }}
      run: |
        echo "workdir=." >> $env:GITHUB_ENV
        
    ###############################
    # Run prebuild command        #
    ###############################
    - name: Run prebuild command
      if: ${{ inputs.prebuild_command != '' }}
      run: ${{ inputs.prebuild_command }}
      working-directory: "${{ env.workdir }}"

    ###############################
    # Build, test, report results #
    ###############################
    - name: Build
      run: dotnet build
      working-directory: "${{ env.workdir }}"

    - name: Pack release version of task
      run: dotnet pack --configuration Release --include-source
      working-directory: "${{ env.workdir }}"
      
    ##########################################################################################################
    # Publish packages to nuget feed - will not do for now, since we should think about autopublishing first #
    ##########################################################################################################
    - name: Push NuGet package(s) to the prod feed
      run: dotnet nuget push "**/*.nupkg"  --api-key ${{ secrets.feed_api_key }} --source ${{ env.azure_artifacts_feed_url }} --skip-duplicate
      working-directory: "${{ env.workdir }}"

    #####################################################################
    # Create release - disabled for now since we have multiple versions #
    #####################################################################
    - name: Get current date
      id: date
      run: echo "::set-output name=date::$(date +'%Y-%m-%d')"
    
    ##########################################################################################################
    # Get the package name
    ##########################################################################################################
    - name: Get package name
      id: package_name
      run: |
        $pkg = Get-ChildItem -Path . -Filter *.nupkg -Exclude *.symbols.nupkg -Recurse | %{$_.Name}
        echo "::set-output name=package_name::$pkg"
      working-directory: "${{ env.workdir }}"
      shell: pwsh
      
    - name: Create Release
      id: create_release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: release-${{ steps.package_name.outputs.package_name }}-${{ steps.date.outputs.date }}
        release_name: Release ${{ steps.package_name.outputs.package_name }} (${{ steps.date.outputs.date }})
        body: |
          You can install the task via frends UI Task View or you can find the NuGet package from https://pkgs.dev.azure.com/frends-platform/frends-tasks/_packaging/main/nuget/v2
        draft: false
        prerelease: false
