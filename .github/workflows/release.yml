name: release.yml

on:
  workflow_call:
    inputs:
      env_var_name_1:
        required: false
        type: string
      env_var_name_2:
        required: false
        type: string
      env_var_name_3:
        required: false
        type: string
      env_var_name_4:
        required: false
        type: string
      workdir:
        required: false
        type: string
      prebuild_command:
        required: false
        type: string
      dotnet_version:
        required: false
        type: string
        default: '6.0.x'
        description: 'Version of .NET SDK to use, e.g. 6.0.x, 8.0.x'
    secrets:
      env_var_value_1:
        required: false
      env_var_value_2:
        required: false
      env_var_value_3:
        required: false
      env_var_value_4:
        required: false
      feed_api_key:
        required: true
      build_time_nuget_feed_url:
        required: false
      build_time_nuget_feed_api_key:
        required: false


env:
  azure_artifacts_feed_url: https://pkgs.dev.azure.com/frends-platform/frends-tasks/_packaging/main/nuget/v3/index.json

jobs:
  build:
    name: ReleaseTheTask
    runs-on: windows-latest
    
    steps:
    - uses: actions/checkout@v1
    
    ###############################
    # SETUP DOTNET                #
    ###############################
    # When setting up dotnet, we need to check if a custom nuget feed is used
    # However in GitHub Actions, in 'if' statements we cannot refer to 'secret' values, thus
    # we need to use a small script to check if the secret is defined or not and then set an
    # output to either true or false.
    - name: Check for custom feed URL
      id: check_for_build_time_feed
      shell: pwsh
      run: |
        if ("${{ secrets.build_time_nuget_feed_url }}" -eq "")
        { "Custom feed URL missing"; echo "build_time_nuget_feed_defined=false" >> $env:GITHUB_OUTPUT }
        else 
        { "Custom feed URL present"; echo "build_time_nuget_feed_defined=true" >> $env:GITHUB_OUTPUT }

    - uses: actions/setup-dotnet@v1
      name: Setup dotnet (no custom feed)
      if: ${{ steps.check_for_build_time_feed.outputs.build_time_nuget_feed_defined == 'false' }}
      with:
        dotnet-version: ${{ inputs.dotnet_version }}
    
    # If a custom nuget feed is used, we need to add it when setting up dotnet
    - uses: actions/setup-dotnet@v1
      name: Setup dotnet (with custom feed)
      if: ${{ steps.check_for_build_time_feed.outputs.build_time_nuget_feed_defined == 'true' }}
      with:
        dotnet-version: ${{ inputs.dotnet_version }}
        source-url: ${{ secrets.build_time_nuget_feed_url }}
      env:
        NUGET_AUTH_TOKEN: ${{ secrets.build_time_nuget_feed_api_key }} 

    ###############################
    # SETUP ENVIRONMENT IF NEEDED #
    ###############################
    - name: Set env var 1
      if: ${{ inputs.env_var_name_1 != '' }}
      run: |
        echo "::add-mask::${{ secrets.env_var_value_1 }}"
        echo "${{ inputs.env_var_name_1 }}=${{ secrets.env_var_value_1 }}" >> $env:GITHUB_ENV
        
    - name: Set env var 2
      if: ${{ inputs.env_var_name_2 != '' }}
      run: |
        echo "::add-mask::${{ secrets.env_var_value_2 }}"
        echo "${{ inputs.env_var_name_2 }}=${{ secrets.env_var_value_2 }}" >> $env:GITHUB_ENV
        
    - name: Set env var 3
      if: ${{ inputs.env_var_name_3 != '' }}
      run: |
        echo "::add-mask::${{ secrets.env_var_value_3 }}"
        echo "${{ inputs.env_var_name_3 }}=${{ secrets.env_var_value_3 }}" >> $env:GITHUB_ENV
        
    - name: Set env var 4
      if: ${{ inputs.env_var_name_4 != '' }}
      run: |
        echo "::add-mask::${{ secrets.env_var_value_4 }}"
        echo "${{ inputs.env_var_name_4 }}=${{ secrets.env_var_value_4 }}" >> $env:GITHUB_ENV
    - name: Set working directory if provided
      if: ${{ inputs.workdir != '' }}
      run: |
        echo "workdir=${{ inputs.workdir }}" >> $env:GITHUB_ENV
    - name: Set working directory to default if not provided
      if: ${{ inputs.workdir == '' }}
      run: |
        echo "workdir=." >> $env:GITHUB_ENV
        
    ###############################
    # Run prebuild command        #
    ###############################
    - name: Run prebuild command
      if: ${{ inputs.prebuild_command != '' }}
      run: ${{ inputs.prebuild_command }}
      working-directory: "${{ env.workdir }}"

    ###############################
    # Build, test, report results #
    ###############################
    - name: Build
      run: dotnet build
      working-directory: "${{ env.workdir }}"

    - name: Pack release version of task
      run: dotnet pack --configuration Release --include-source
      working-directory: "${{ env.workdir }}"
      
    ##########################################################################################################
    # Get the package name
    ##########################################################################################################
    - name: Get package name
      id: package_name
      run: |
        $pkg = Get-ChildItem -Path . -Filter *.nupkg -Exclude *.symbols.nupkg -Recurse | %{$_.Name}
        echo "package_name=testowo" >> $env:$GITHUB_OUTPUT
      working-directory: "${{ env.workdir }}"
      shell: pwsh
      
    ##########################################################################################################
    # Publish packages to nuget feed - will not do for now, since we should think about autopublishing first #
    ##########################################################################################################
    # Setup dotnet again with prod feed
    - uses: actions/setup-dotnet@v1
      with:
        dotnet-version: ${{ inputs.dotnet_version }}
        source-url: ${{ env.azure_artifacts_feed_url }}
      env:
        NUGET_AUTH_TOKEN: ${{ secrets.feed_api_key }} 
    - name: Push NuGet package(s) to the prod feed
      run: dotnet nuget push "**/${{ steps.package_name.outputs.package_name }}"  --api-key ${{ secrets.feed_api_key }} --source ${{ env.azure_artifacts_feed_url }}
      working-directory: "${{ env.workdir }}"

    #####################################################################
    # Create release - disabled for now since we have multiple versions #
    #####################################################################
    - name: Get current date
      id: date
      run: echo "date=$(date +'%Y-%m-%d')" >> $env:$GITHUB_OUTPUT
      
    - name: Create Release
      id: create_release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: release-${{ steps.package_name.outputs.package_name }}-${{ steps.date.outputs.date }}
        release_name: Release ${{ steps.package_name.outputs.package_name }} (${{ steps.date.outputs.date }})
        body: |
          You can install the task via frends UI Task View or you can find the NuGet package from https://pkgs.dev.azure.com/frends-platform/frends-tasks/_packaging/main/nuget/v2
        draft: false
        prerelease: false
