name: release.yml

on:
  workflow_call:
    inputs:
      env_var_name_1:
        required: false
        type: string
      env_var_name_2:
        required: false
        type: string
      env_var_name_3:
        required: false
        type: string
      env_var_name_4:
        required: false
        type: string
      workdir:
        required: false
        type: string
        default: '.'
      prebuild_command:
        required: false
        type: string
      dotnet_version:
        required: false
        type: string
        default: '6.0.x'
        description: 'Version of .NET SDK to use, e.g. 6.0.x, 8.0.x'
      strict_analyzers:
        required: false
        type: boolean
        default: false
    secrets:
      env_var_value_1:
        required: false
      env_var_value_2:
        required: false
      env_var_value_3:
        required: false
      env_var_value_4:
        required: false
      feed_api_key:
        required: true
      build_time_nuget_feed_url:
        required: false
      build_time_nuget_feed_api_key:
        required: false

env:
  NUGET_SOURCE_URL: https://pkgs.dev.azure.com/frends-platform/frends-tasks/_packaging/main/nuget/v3/index.json
  ROSLYNATOR_VERSION: 0.10.1

jobs:
  build:
    name: Release the task
    runs-on: windows-latest
    defaults:
      run:
        shell: pwsh
        working-directory: ${{ inputs.workdir }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4.2.2

      ###############################
      # SETUP DOTNET                #
      ###############################
      # When setting up dotnet, we need to check if a custom nuget feed is used
      # However in GitHub Actions, in 'if' statements we cannot refer to 'secret' values, thus
      # we need to use a small script to check if the secret is defined or not and then set an
      # output to either true or false.
      - id: check_build_time_feed
        name: Check if custom NuGet feed is set
        run: |
          if ("${{ secrets.build_time_nuget_feed_url }}" -eq "")
          {
            echo "defined=false" >> $env:GITHUB_OUTPUT
          }
          else
          {
            echo "defined=true" >> $env:GITHUB_OUTPUT
          }

      - if: ${{ steps.check_build_time_feed.outputs.defined == 'false' }}
        name: Setup .NET SDK
        uses: actions/setup-dotnet@v4.3.1
        with:
          dotnet-version: ${{ inputs.dotnet_version }}

      # If a custom nuget feed is used, we need to add it when setting up dotnet
      - if: ${{ steps.check_build_time_feed.outputs.defined == 'true' }}
        name: Setup .NET SDK (with custom feed)
        uses: actions/setup-dotnet@v4.3.1
        with:
          dotnet-version: ${{ inputs.dotnet_version }}
          source-url: ${{ secrets.build_time_nuget_feed_url }}
        env:
          NUGET_AUTH_TOKEN: ${{ secrets.build_time_nuget_feed_api_key }}

      ###############################
      # SETUP ENVIRONMENT IF NEEDED #
      ###############################
      - if: ${{ inputs.env_var_name_1 != '' }}
        name: Set env var 1
        run: |
          echo "::add-mask::${{ secrets.env_var_value_1 }}"
          echo "${{ inputs.env_var_name_1 }}=${{ secrets.env_var_value_1 }}" >> $env:GITHUB_ENV

      - if: ${{ inputs.env_var_name_2 != '' }}
        name: Set env var 2
        run: |
          echo "::add-mask::${{ secrets.env_var_value_2 }}"
          echo "${{ inputs.env_var_name_2 }}=${{ secrets.env_var_value_2 }}" >> $env:GITHUB_ENV

      - if: ${{ inputs.env_var_name_3 != '' }}
        name: Set env var 3
        run: |
          echo "::add-mask::${{ secrets.env_var_value_3 }}"
          echo "${{ inputs.env_var_name_3 }}=${{ secrets.env_var_value_3 }}" >> $env:GITHUB_ENV

      - if: ${{ inputs.env_var_name_4 != '' }}
        name: Set env var 4
        run: |
          echo "::add-mask::${{ secrets.env_var_value_4 }}"
          echo "${{ inputs.env_var_name_4 }}=${{ secrets.env_var_value_4 }}" >> $env:GITHUB_ENV

      ###############################
      # Install required tools      #
      ###############################
      - name: Enable global .NET tools
        run: |
          echo $env:HOME\.dotnet\tools >> $GITHUB_PATH

      - name: Install Roslynator
        run: |
          dotnet tool install --global Roslynator.DotNet.Cli --version ${{ env.ROSLYNATOR_VERSION }}

      - name: Download FrendsTaskAnalyzers
        env:
          GITHUB_TOKEN: ${{ github.token }}
        run: |
          mkdir .analyzers/tmp
          $latest = gh release list `
              --repo 'FrendsPlatform/FrendsTasks' `
              --json tagName `
              --exclude-drafts `
              --exclude-pre-releases `
              --jq '[.[] | select(.tagName | startswith("analyzers-")) | .tagName] | first'
          gh release download "$latest" `
              --repo 'FrendsPlatform/FrendsTasks' `
              --dir '.analyzers' `
              --pattern '*.nupkg'
          Expand-Archive -Path '.analyzers/*.nupkg' -DestinationPath '.analyzers/tmp'
          Get-ChildItem -Path '.analyzers/tmp' -Filter '*.dll' -Recurse | Move-Item -Destination '.analyzers' -Force
          Remove-Item -Path '.analyzers/tmp' -Recurse -Force

      ###############################
      # Run prebuild command        #
      ###############################
      - if: ${{ inputs.prebuild_command != '' }}
        name: Run prebuild command
        run: ${{ inputs.prebuild_command }}

      ###############################
      # Build, test, report results #
      ###############################
      - name: Build
        run: dotnet build

      - name: Write .editorconfig
        run: |
          $file = Get-ChildItem -Path . -Include 'FrendsTaskMetadata.json' -Recurse | select -First 1
          $contents = Get-Content $file -Raw -Encoding UTF8
          $contents = $contents.Trim()
          $json = $contents | ConvertFrom-Json
          $methods = $json.Tasks | Join-String -Property TaskMethod -Separator ';'
          $lines = @"
          [*.cs]
          frends_task_analyzers.task_methods = $methods
          "@
          Add-Content -Path .editorconfig -Value $lines

      - name: Format
        run: |
          dotnet format `
            --verify-no-changes `
            --verbosity detailed
        continue-on-error: ${{ !inputs.strict_analyzers }}

      - name: Lint
        run: |
          $projects = Get-ChildItem -Recurse -Filter *.csproj |
            Where-Object { $_.Name -notlike '*.Tests.csproj' }

          foreach ($proj in $projects) {
            roslynator analyze `
              --analyzer-assemblies '.analyzers' `
              --verbosity detailed `
              $proj.FullName
          }
        continue-on-error: ${{ !inputs.strict_analyzers }}

      - name: Cleanup after analyzers
        run: |
          git ls-files --error-unmatch .editorconfig 2>&1 > $null || $true
          if ($LastExitCode -eq 0)
          {
            git restore .editorconfig
          }
          else
          {
            Remove-Item -Path '.editorconfig' -Force -ErrorAction SilentlyContinue
          }
          Remove-Item -Path '.analyzers' -Recurse -Force -ErrorAction SilentlyContinue
          exit 0

      - name: Pack
        run: dotnet pack --configuration Release --include-source

      ##########################################################################################################
      # Get the package name
      ##########################################################################################################
      - name: Get package name
        id: package_name
        run: |
          $pkg = Get-ChildItem -Path . -Filter *.nupkg -Exclude *.symbols.nupkg -Recurse | %{$_.Name}
          echo "package_name=$pkg" >> $env:GITHUB_OUTPUT

      ##########################################################################################################
      # Publish packages to nuget feed - will not do for now, since we should think about autopublishing first #
      ##########################################################################################################
      # Setup dotnet again with prod feed
      - name: Setup .NET SDK (with prod feed)
        uses: actions/setup-dotnet@v4.3.1
        with:
          dotnet-version: ${{ inputs.dotnet_version }}
          source-url: ${{ env.NUGET_SOURCE_URL }}
        env:
          NUGET_AUTH_TOKEN: ${{ secrets.feed_api_key }}

      - name: Push NuGet package(s)
        run: |
          dotnet nuget push "**/${{ steps.package_name.outputs.package_name }}" `
              --source ${{ env.NUGET_SOURCE_URL }} `
              --api-key ${{ secrets.feed_api_key }} `
              --no-symbols

      #####################################################################
      # Create release - disabled for now since we have multiple versions #
      #####################################################################
      - name: Get current date
        id: date
        run: echo "date=$(date +'%Y-%m-%d')" >> $env:GITHUB_OUTPUT

      - name: Create release
        uses: softprops/action-gh-release@v2.2.2
        with:
          draft: false
          prerelease: false
          tag_name: release-${{ steps.package_name.outputs.package_name }}-${{ steps.date.outputs.date }}
          name: Release ${{ steps.package_name.outputs.package_name }} (${{ steps.date.outputs.date }})
          body: |
            You can install the task via frends UI Task View or you can find the NuGet package from https://pkgs.dev.azure.com/frends-platform/frends-tasks/_packaging/main/nuget/v2
