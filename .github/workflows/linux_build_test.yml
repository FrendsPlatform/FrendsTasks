name: linux_build_test.yml

on:
  workflow_call:
    inputs:
      env_var_name_1:
        required: false
        type: string
      env_var_name_2:
        required: false
        type: string
      env_var_name_3:
        required: false
        type: string
      env_var_name_4:
        required: false
        type: string
      env_var_name_5:
        required: false
        type: string
      env_var_name_6:
        required: false
        type: string
      workdir:
        required: false
        type: string
      lint_ignore:
        required: false
        type: string
      prebuild_command:
        required: false
        type: string
    secrets:
      env_var_value_1:
        required: false
      env_var_value_2:
        required: false
      env_var_value_3:
        required: false
      env_var_value_4:
        required: false
      env_var_value_5:
        required: false
      env_var_value_6:
        required: false
      badge_service_api_key:
        required: true
      test_feed_api_key:
        required: true

env:
  azure_artifacts_feed_url: https://pkgs.dev.azure.com/frends-platform/frends-tasks/_packaging/test/nuget/v3/index.json

jobs:
  lint:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v1
    
    - name: Lint Code Base
      uses: github/super-linter@v4
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        DEFAULT_BRANCH: main
        OUTPUT_DETAILS: detailed
        VALIDATE_CSHARP: true
        VALIDATE_GITLEAKS: true
        IGNORE_GITIGNORED_FILES: true
        FILTER_REGEX_INCLUDE: "${{ inputs.workdir }}"
        FILTER_REGEX_EXCLUDE: "${{ input.lint_ignore}}"

  build:
    name: Build on ubuntu-latest
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v1
    - uses: actions/setup-dotnet@v1
      with:
        dotnet-version: '6.0.x'
        source-url: ${{ env.azure_artifacts_feed_url }}
      env:
        NUGET_AUTH_TOKEN: ${{ secrets.test_feed_api_key }} 

    ###############################
    # SETUP ENVIRONMENT IF NEEDED #
    ###############################
    - name: Set env var 1
      if: ${{ inputs.env_var_name_1 != '' }}
      run: |
        echo "::add-mask::${{ secrets.env_var_value_1 }}"
        echo "${{ inputs.env_var_name_1 }}=${{ secrets.env_var_value_1 }}" >> $GITHUB_ENV
        
    - name: Set env var 2
      if: ${{ inputs.env_var_name_2 != '' }}
      run: |
        echo "::add-mask::${{ secrets.env_var_value_2 }}"
        echo "${{ inputs.env_var_name_2 }}=${{ secrets.env_var_value_2 }}" >> $GITHUB_ENV
        
    - name: Set env var 3
      if: ${{ inputs.env_var_name_3 != '' }}
      run: |
        echo "::add-mask::${{ secrets.env_var_value_3 }}"
        echo "${{ inputs.env_var_name_3 }}=${{ secrets.env_var_value_3 }}" >> $GITHUB_ENV
        
    - name: Set env var 4
      if: ${{ inputs.env_var_name_4 != '' }}
      run: |
        echo "::add-mask::${{ secrets.env_var_value_4 }}"
        echo "${{ inputs.env_var_name_4 }}=${{ secrets.env_var_value_4 }}" >> $GITHUB_ENV

    - name: Set working directory if provided
      if: ${{ inputs.workdir != '' }}
      run: |
        echo "workdir=${{ inputs.workdir }}" >> $GITHUB_ENV

    - name: Set working directory to default if not provided
      if: ${{ inputs.workdir == '' }}
      run: |
        echo "workdir=." >> $GITHUB_ENV

    ###############################
    # Install required tools      #
    ###############################
    - name: Install tools
      run: |
        sudo apt-get update
        sudo apt-get install xmlstarlet -y
        
    ###############################
    # Run prebuild command        #
    ###############################
    - name: Run prebuild command
      if: ${{ inputs.prebuild_command != '' }}
      run: ${{ inputs.prebuild_command }}
      working-directory: "${{ env.workdir }}"

    ###############################
    # Build, test, report results #
    ###############################
    - name: Build
      run: dotnet build
      working-directory: "${{ env.workdir }}"
    
    - name: Test
      run: dotnet test --collect:"XPlat Code Coverage"
      working-directory: "${{ env.workdir }}"

    - name: Get Line Rate from output
      id: get_line_rate
      shell: pwsh
      run: |
        $covreport = get-childitem -Filter coverage.cobertura.xml -Recurse | Sort-Object -Descending -Property LastWriteTime -Top 1
        Write-Output $covreport.FullName
        [xml]$covxml = Get-Content -Path $covreport.FullName
        $lineRate = $covxml.coverage.'line-rate'
        Write-Output "::set-output name=lineRate::$lineRate"

    - name: Check coverage tolerance
      if: ${{ steps.get_line_rate.outputs.lineRate < 0.8 }}
      uses: actions/github-script@v3
      with:
        script: |
            core.setFailed('Coverage test below tolerance')
      
    - name: Pack release version of task
      run: dotnet pack --configuration Release --include-source
      working-directory: "${{ env.workdir }}"
      
    - name: Save coverage results
      id: vars
      run: |
        badgeKey="${{ github.repository }}|${{ github.ref_name }}"
        apiKey="${{ secrets.badge_service_api_key }}"
        if [ "${{ env.workdir }}" != '.' ]; then
          badgeKey="${{ github.repository }}/${{ env.workdir }}|${{ github.ref_name }}"
        fi
        pathToCoverageFile=$(find . -name "coverage.cobertura.xml")
        mv $pathToCoverageFile .
        coverage=$(xmlstarlet sel -t -v '//coverage/@line-rate' coverage.cobertura.xml)
        covPercent=$(echo "$coverage * 100" | bc -l)
        coverageInt=$(printf "%.0f" $covPercent)
        json="{\"key\":\"$badgeKey\",\"displayName\":\"Coverage\",\"value\":\"$coverageInt%\"}"
        curl -X POST -H "x-api-key: $apiKey" -H "Content-Type: application/json" -d $json https://app-github-custom-badges.azurewebsites.net/Badge
      working-directory: "${{ env.workdir }}"

    # This will push all the packages it can find
    - name: Push NuGet package(s) to the test feed
      run: dotnet nuget push "**/*.nupkg"  --api-key ${{ secrets.test_feed_api_key }} --source ${{ env.azure_artifacts_feed_url }} --skip-duplicate
      working-directory: "${{ env.workdir }}"
