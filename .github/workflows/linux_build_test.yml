name: linux_build_test.yml

on:
  workflow_call:
    inputs:
      env_var_name_1:
        required: false
        type: string
      env_var_name_2:
        required: false
        type: string
      env_var_name_3:
        required: false
        type: string
      env_var_name_4:
        required: false
        type: string
      env_var_name_5:
        required: false
        type: string
      env_var_name_6:
        required: false
        type: string
      env_var_name_7:
        required: false
        type: string
      env_var_name_8:
        required: false
        type: string
      workdir:
        required: false
        type: string
      prebuild_command:
        required: false
        type: string
    secrets:
      env_var_value_1:
        required: false
      env_var_value_2:
        required: false
      env_var_value_3:
        required: false
      env_var_value_4:
        required: false
      env_var_value_5:
        required: false
      env_var_value_6:
        required: false
      env_var_value_7:
        required: false
      env_var_value_8:
        required: false
      badge_service_api_key:
        required: true
      test_feed_api_key:
        required: true
      build_time_nuget_feed_url:
        required: false
      build_time_nuget_feed_api_key:
        required: false

env:
  azure_artifacts_feed_url: https://pkgs.dev.azure.com/frends-platform/frends-tasks/_packaging/test/nuget/v3/index.json

jobs:
  CodeQualityCheck:
    name: Code Quality Check
    runs-on: ubuntu-latest
    steps:
    - name: Checkout Code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
    
    - name: Lint Code Base
      uses: github/super-linter@v4
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        DEFAULT_BRANCH: main
        OUTPUT_DETAILS: detailed
        VALIDATE_CSHARP: true
        IGNORE_GITIGNORED_FILES: true
        FILTER_REGEX_INCLUDE: "${{ inputs.workdir }}/"

  CodeQL-Analyze:
    name: Analyze
    runs-on: ${{ (matrix.language == 'swift' && 'macos-latest') || 'ubuntu-latest' }}

    strategy:
      fail-fast: false
      matrix:
        language: [ 'csharp' ]
        # CodeQL supports [ 'cpp', 'csharp', 'go', 'java', 'javascript', 'python' ]
        # Learn more:
        # https://docs.github.com/en/free-pro-team@latest/github/finding-security-vulnerabilities-and-errors-in-your-code/configuring-code-scanning#changing-the-languages-that-are-analyzed

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    # Initializes the CodeQL tools for scanning.
    - name: Initialize CodeQL
      uses: github/codeql-action/init@v3
      with:
        # debug: true
        languages: ${{ matrix.language }}
        queries: security-extended,security-and-quality
        # If you wish to specify custom queries, you can do so here or in a config file.
        # By default, queries listed here will override any specified in a config file.
        # Prefix the list here with "+" to use these queries and those in the config file.
        # queries: ./path/to/local/query, your-org/your-repo/queries@main

    - name: Build
      run: dotnet build
      working-directory: ${{ inputs.workdir }}

    - name: Perform CodeQL Analysis
      uses: github/codeql-action/analyze@v3
      with:
        category: "/language:${{matrix.language}}"

    - name: Upload Sarif Report to Workflow
      id: upload
      uses: actions/upload-artifact@v2
      with:
        name: sarif-report-${{ matrix.language }}
        path: /home/runner/work/**/*.sarif
    
  Detect-Errors:
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        language: [ 'csharp' ]
    needs:
      - CodeQL-Analyze
    steps:
    - name: Download Sarif Report
      uses: actions/download-artifact@v3
      with:
        name: sarif-report-${{ matrix.language }}

    - name: Detect Errors
      id: detect-errors
      run: |
        repo=$(echo ${{ github.repository }} | awk -F'/' '{print $2}')
        results=$(cat $repo/results/${{ matrix.language }}.sarif | jq -r '.runs[].results[].ruleId')
        resultsArray=($results)

        errorCount=0
        warningCount=0
        recommendCount=0
        errors=()
        warnings=()
        recommends=()

        for var in "${resultsArray[@]}"
        do
          severity=$(cat $repo/results/${{ matrix.language }}.sarif | jq -r '.runs[].tool.extensions[].rules[] | select(.id=="'$var'").properties."problem.severity"')
          desc=$(cat $repo/results/${{ matrix.language }}.sarif | jq -r '.runs[].tool.extensions[].rules[] | select(.id=="'$var'").fullDescription."text"')
          _location_array=($(cat $repo/results/${{ matrix.language }}.sarif | jq -r '.runs[].results[] | select(.ruleId=="'$var'") | (.locations[].physicalLocation | "\(.artifactLocation.uri) \(.region.startLine)")' | tr '\n' ' '))
          messages=()

          at=${#_location_array[*]}
          s=""

          for (( i=0; i<${at}; i++ ))
          do
            [ $i -lt $(( $at - 1 )) ] && s="," || s=""
            file="${_location_array[$i]}"
            i=$((i+1))
            line="${_location_array[$i]}"
            msg="${desc} --> ${file} : ${line}"
            messages+=("${msg}")
            
          done

          echo "${var} | $severity"

          for j in "${messages[@]}"
          do
            if [ "$severity" == "warning" ]; 
            then 
              if [[ ! " ${warnings[@]} " =~ "${j}" ]];
              then
                let warningCount+=1;
                warnings+=("${j}\n"); 
              fi 
            fi
            if [ "$severity" == "error" ];
            then 
              if [[ ! " ${errors[@]} " =~ "${j}" ]];
              then
                let errorCount+=1;
                errors+=("${j}\n");
              fi
            fi
            if [ "$severity" == "recommendation" ];
            then 
              if [[ ! " ${recommends[@]} " =~ "${j}" ]];
              then
                let recommendCount+=1;
                recommends+=("${j}\n");
              fi
            fi
          done
        done

        echo "" >> $GITHUB_STEP_SUMMARY
        echo "# CodeQL Check" >> $GITHUB_STEP_SUMMARY

        if [ $errorCount -eq 0  ] && [ $warningCount -eq 0 ] && [ $recommendCount -eq 0 ]; then
          echo "# CodeQL Check Succeeded!" >> $GITHUB_STEP_SUMMARY;
        else
          echo "# :x: CodeQL Check Failed! :x:" >> $GITHUB_STEP_SUMMARY;
          message="Notes found from the code. Check the PR or the workflow summary for the details"
          echo "gt_msg=$message" >> "$GITHUB_OUTPUT"
        fi

        if [ $recommendCount -gt 0 ]; then
          echo -e "### Recommendation:\n ${recommends[*]}" >> $GITHUB_STEP_SUMMARY;
        fi
        
        echo "## Error Count: $errorCount" >> $GITHUB_STEP_SUMMARY

        if [ $errorCount -gt 0 ]; then
          echo -e "### Errors:\n ${errors[*]}" >> $GITHUB_STEP_SUMMARY;
        fi

        echo "## Warning Count: $warningCount" >> $GITHUB_STEP_SUMMARY

        if [ $warningCount -gt 0 ]; then
          echo -e "### Warnings:\n ${warnings[*]}" >> $GITHUB_STEP_SUMMARY;
        fi

        echo "" >> $GITHUB_STEP_SUMMARY

        if [ $errorCount -gt 0 ] || [ $recommendCount -gt 0 ] || [ $warningCount -gt 0 ]; then
            echo "errors found - failing detect error check..."
            exit -1
        fi

    - name: Checkout
        uses: actions/checkout@v3

    - name: Comment PR
        uses: thollander/actions-comment-pull-request@v2
        with:
          message: |
            ${{ steps.detect-errros.outputs.gt_msg }}

  build:
    name: Build on ubuntu-latest
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v1
    
    ###############################
    # SETUP DOTNET                #
    ###############################
    # When setting up dotnet, we need to check if a custom nuget feed is used
    # However in GitHub Actions, in 'if' statements we cannot refer to 'secret' values, thus
    # we need to use a small script to check if the secret is defined or not and then set an
    # output to either true or false.
    - name: Check for custom feed URL
      id: check_for_build_time_feed
      shell: pwsh
      run: |
        if ("${{ secrets.build_time_nuget_feed_url }}" -eq "")
        { "Custom feed URL missing"; echo "build_time_nuget_feed_defined=false" >> $env:GITHUB_OUTPUT }
        else 
        { "Custom feed URL present"; echo "build_time_nuget_feed_defined=true" >> $env:GITHUB_OUTPUT }

    - uses: actions/setup-dotnet@v1
      name: Setup dotnet (no custom feed)
      if: ${{ steps.check_for_build_time_feed.outputs.build_time_nuget_feed_defined == 'false' }}
      with:
        dotnet-version: '6.0.x'
    
    # If a custom nuget feed is used, we need to add it when setting up dotnet
    - uses: actions/setup-dotnet@v1
      name: Setup dotnet (with custom feed)
      if: ${{ steps.check_for_build_time_feed.outputs.build_time_nuget_feed_defined == 'true' }}
      with:
        dotnet-version: '6.0.x'
        source-url: ${{ secrets.build_time_nuget_feed_url }}
      env:
        NUGET_AUTH_TOKEN: ${{ secrets.build_time_nuget_feed_api_key }} 

    ###############################
    # SETUP ENVIRONMENT IF NEEDED #
    ###############################
    - name: Set env var 1
      if: ${{ inputs.env_var_name_1 != '' }}
      run: |
        echo "::add-mask::${{ secrets.env_var_value_1 }}"
        echo "${{ inputs.env_var_name_1 }}=${{ secrets.env_var_value_1 }}" >> $GITHUB_ENV
        
    - name: Set env var 2
      if: ${{ inputs.env_var_name_2 != '' }}
      run: |
        echo "::add-mask::${{ secrets.env_var_value_2 }}"
        echo "${{ inputs.env_var_name_2 }}=${{ secrets.env_var_value_2 }}" >> $GITHUB_ENV
        
    - name: Set env var 3
      if: ${{ inputs.env_var_name_3 != '' }}
      run: |
        echo "::add-mask::${{ secrets.env_var_value_3 }}"
        echo "${{ inputs.env_var_name_3 }}=${{ secrets.env_var_value_3 }}" >> $GITHUB_ENV
        
    - name: Set env var 4
      if: ${{ inputs.env_var_name_4 != '' }}
      run: |
        echo "::add-mask::${{ secrets.env_var_value_4 }}"
        echo "${{ inputs.env_var_name_4 }}=${{ secrets.env_var_value_4 }}" >> $GITHUB_ENV

    - name: Set env var 5
      if: ${{ inputs.env_var_name_5 != '' }}
      run: |
        echo "::add-mask::${{ secrets.env_var_value_5 }}"
        echo "${{ inputs.env_var_name_5 }}=${{ secrets.env_var_value_5 }}" >> $GITHUB_ENV

    - name: Set env var 6
      if: ${{ inputs.env_var_name_6 != '' }}
      run: |
        echo "::add-mask::${{ secrets.env_var_value_6 }}"
        echo "${{ inputs.env_var_name_6 }}=${{ secrets.env_var_value_6 }}" >> $GITHUB_ENV

    - name: Set env var 7
      if: ${{ inputs.env_var_name_7 != '' }}
      run: |
        echo "::add-mask::${{ secrets.env_var_value_7 }}"
        echo "${{ inputs.env_var_name_7 }}=${{ secrets.env_var_value_7 }}" >> $GITHUB_ENV

    - name: Set env var 8
      if: ${{ inputs.env_var_name_8 != '' }}
      run: |
        echo "::add-mask::${{ secrets.env_var_value_8 }}"
        echo "${{ inputs.env_var_name_8 }}=${{ secrets.env_var_value_8 }}" >> $GITHUB_ENV

    - name: Set working directory if provided
      if: ${{ inputs.workdir != '' }}
      run: |
        echo "workdir=${{ inputs.workdir }}" >> $GITHUB_ENV

    - name: Set working directory to default if not provided
      if: ${{ inputs.workdir == '' }}
      run: |
        echo "workdir=." >> $GITHUB_ENV

    ###############################
    # Install required tools      #
    ###############################
    - name: Install tools
      run: |
        sudo apt-get update
        sudo apt-get install xmlstarlet -y
        
    ###############################
    # Run prebuild command        #
    ###############################
    - name: Run prebuild command
      if: ${{ inputs.prebuild_command != '' }}
      run: ${{ inputs.prebuild_command }}
      working-directory: "${{ env.workdir }}"

    ###############################
    # Build, test, report results #
    ###############################
    - name: Build
      run: dotnet build
      working-directory: "${{ env.workdir }}"
    
    - name: Test
      run: |
        dotnet test --collect:"XPlat Code Coverage"
      working-directory: "${{ env.workdir }}"

    - name: Check Code Coverage
      id: get_line_rate
      run: |
        report=$(find . -name "coverage.cobertura.xml")
        cp $report .
        coverage=$(xmlstarlet sel -t -v '//coverage/@line-rate' coverage.cobertura.xml)
        covPercent=$(echo "$coverage * 100" | bc -l)
        coverageInt=$(printf "%.0f" $covPercent)
        if test $coverageInt -lt 80 
        then
          echo "Test coverage $coverageInt% was not in the tolerance 80%"
          echo "The Code Check failed! :x:" >> $GITHUB_STEP_SUMMARY
          echo "## Test coverage $coverageInt% was not in the tolerance 80% :thumbsdown:" >> $GITHUB_STEP_SUMMARY
          exit 1
        else
          echo "The Code Check passed :raised_hands:" >> $GITHUB_STEP_SUMMARY
          echo "## Test coverage $coverageInt% :thumbsup:" >> $GITHUB_STEP_SUMMARY
        fi

    - name: Pack release version of task
      run: dotnet pack --configuration Release --include-source
      working-directory: "${{ env.workdir }}"
      
    - name: Save coverage results
      id: vars
      run: |
        badgeKey="${{ github.repository }}|${{ github.ref_name }}"
        apiKey="${{ secrets.badge_service_api_key }}"
        if [ "${{ env.workdir }}" != '.' ]; then
          badgeKey="${{ github.repository }}/${{ env.workdir }}|${{ github.ref_name }}"
        fi
        coverageReport=$(find . -name "coverage.cobertura.xml")
        mv $coverageReport .
        coverage=$(xmlstarlet sel -t -v '//coverage/@line-rate' coverage.cobertura.xml)
        covPercent=$(echo "$coverage * 100" | bc -l)
        coverageInt=$(printf "%.0f" $covPercent)
        json="{\"key\":\"$badgeKey\",\"displayName\":\"Coverage\",\"value\":\"$coverageInt%\"}"
        curl -X POST -H "x-api-key: $apiKey" -H "Content-Type: application/json" -d $json https://app-github-custom-badges.azurewebsites.net/Badge
      working-directory: "${{ env.workdir }}"


    # Setup dotnet again with test feed
    - uses: actions/setup-dotnet@v1
      with:
        dotnet-version: '6.0.x'
        source-url: ${{ env.azure_artifacts_feed_url }}
      env:
        NUGET_AUTH_TOKEN: ${{ secrets.test_feed_api_key }}
    # Push the package to the test feed
    - name: Push NuGet package(s) to the test feed
      run: dotnet nuget push "**/*.nupkg"  --api-key ${{ secrets.test_feed_api_key }} --source ${{ env.azure_artifacts_feed_url }} --skip-duplicate
      working-directory: "${{ env.workdir }}"
