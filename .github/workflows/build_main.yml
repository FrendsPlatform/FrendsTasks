name: build_main.yml

on:
  workflow_call:
    inputs:
      env_var_name_1:
        required: false
        type: string
      env_var_name_2:
        required: false
        type: string
      env_var_name_3:
        required: false
        type: string
      env_var_name_4:
        required: false
        type: string
      env_var_name_5:
        required: false
        type: string
      env_var_name_6:
        required: false
        type: string
      env_var_name_7:
        required: false
        type: string
      env_var_name_8:
        required: false
        type: string
      workdir:
        required: false
        type: string
        default: '.'
      prebuild_command:
        required: false
        type: string
      dotnet_version:
        required: false
        type: string
        default: '6.0.x'
        description: 'Version of .NET SDK to use, e.g. 6.0.x, 8.0.x'
      strict_analyzers:
        required: false
        type: boolean
        default: false
    secrets:
      env_var_value_1:
        required: false
      env_var_value_2:
        required: false
      env_var_value_3:
        required: false
      env_var_value_4:
        required: false
      env_var_value_5:
        required: false
      env_var_value_6:
        required: false
      env_var_value_7:
        required: false
      env_var_value_8:
        required: false
      badge_service_api_key:
        required: true
      build_time_nuget_feed_url:
        required: false
      build_time_nuget_feed_api_key:
        required: false

env:
  ROSLYNATOR_VERSION: 0.10.1

jobs:
  build:
    name: Build main branch
    runs-on: windows-latest
    defaults:
      run:
        shell: pwsh
        working-directory: ${{ inputs.workdir }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4.2.2

      ###############################
      # SETUP DOTNET                #
      ###############################
      # When setting up dotnet, we need to check if a custom nuget feed is used
      # However in GitHub Actions, in 'if' statements we cannot refer to 'secret' values, thus
      # we need to use a small script to check if the secret is defined or not and then set an
      # output to either true or false.
      - id: check_build_time_feed
        name: Check if custom NuGet feed is set
        run: |
          if ("${{ secrets.build_time_nuget_feed_url }}" -eq "")
          {
            echo "defined=false" >> $env:GITHUB_OUTPUT
          }
          else
          {
            echo "defined=true" >> $env:GITHUB_OUTPUT
          }

      - if: ${{ steps.check_build_time_feed.outputs.defined == 'false' }}
        name: Setup .NET SDK
        uses: actions/setup-dotnet@v4.3.1
        with:
          dotnet-version: ${{ inputs.dotnet_version }}

      # If a custom nuget feed is used, we need to add it when setting up dotnet
      - if: ${{ steps.check_build_time_feed.outputs.defined == 'true' }}
        name: Setup .NET SDK (with custom feed)
        uses: actions/setup-dotnet@v4.3.1
        with:
          dotnet-version: ${{ inputs.dotnet_version }}
          source-url: ${{ secrets.build_time_nuget_feed_url }}
        env:
          NUGET_AUTH_TOKEN: ${{ secrets.build_time_nuget_feed_api_key }}

      ###############################
      # SETUP ENVIRONMENT IF NEEDED #
      ###############################
      - if: ${{ inputs.env_var_name_1 != '' }}
        name: Set env var 1
        run: |
          echo "::add-mask::${{ secrets.env_var_value_1 }}"
          echo "${{ inputs.env_var_name_1 }}=${{ secrets.env_var_value_1 }}" >> $env:GITHUB_ENV

      - if: ${{ inputs.env_var_name_2 != '' }}
        name: Set env var 2
        run: |
          echo "::add-mask::${{ secrets.env_var_value_2 }}"
          echo "${{ inputs.env_var_name_2 }}=${{ secrets.env_var_value_2 }}" >> $env:GITHUB_ENV

      - if: ${{ inputs.env_var_name_3 != '' }}
        name: Set env var 3
        run: |
          echo "::add-mask::${{ secrets.env_var_value_3 }}"
          echo "${{ inputs.env_var_name_3 }}=${{ secrets.env_var_value_3 }}" >> $env:GITHUB_ENV

      - if: ${{ inputs.env_var_name_4 != '' }}
        name: Set env var 4
        run: |
          echo "::add-mask::${{ secrets.env_var_value_4 }}"
          echo "${{ inputs.env_var_name_4 }}=${{ secrets.env_var_value_4 }}" >> $env:GITHUB_ENV

      - if: ${{ inputs.env_var_name_5 != '' }}
        name: Set env var 5
        run: |
          echo "::add-mask::${{ secrets.env_var_value_5 }}"
          echo "${{ inputs.env_var_name_5 }}=${{ secrets.env_var_value_5 }}" >> $env:GITHUB_ENV

      - if: ${{ inputs.env_var_name_6 != '' }}
        name: Set env var 6
        run: |
          echo "::add-mask::${{ secrets.env_var_value_6 }}"
          echo "${{ inputs.env_var_name_6 }}=${{ secrets.env_var_value_6 }}" >> $env:GITHUB_ENV

      - if: ${{ inputs.env_var_name_7 != '' }}
        name: Set env var 7
        run: |
          echo "::add-mask::${{ secrets.env_var_value_7 }}"
          echo "${{ inputs.env_var_name_7 }}=${{ secrets.env_var_value_7 }}" >> $env:GITHUB_ENV

      - if: ${{ inputs.env_var_name_8 != '' }}
        name: Set env var 8
        run: |
          echo "::add-mask::${{ secrets.env_var_value_8 }}"
          echo "${{ inputs.env_var_name_8 }}=${{ secrets.env_var_value_8 }}" >> $env:GITHUB_ENV

      ###############################
      # Install required tools      #
      ###############################
      - name: Enable global .NET tools
        run: |
          echo $env:HOME\.dotnet\tools >> $GITHUB_PATH

      - name: Install Roslynator
        run: |
          dotnet tool install --global Roslynator.DotNet.Cli --version ${{ env.ROSLYNATOR_VERSION }}

      - name: Download FrendsTaskAnalyzers
        env:
          GITHUB_TOKEN: ${{ github.token }}
        run: |
          mkdir .analyzers/tmp
          $latest = gh release list `
              --repo 'FrendsPlatform/FrendsTasks' `
              --json tagName `
              --exclude-drafts `
              --exclude-pre-releases `
              --jq '[.[] | select(.tagName | startswith("analyzers-")) | .tagName] | first'
          gh release download "$latest" `
              --repo 'FrendsPlatform/FrendsTasks' `
              --dir '.analyzers' `
              --pattern '*.nupkg'
          Expand-Archive -Path '.analyzers/*.nupkg' -DestinationPath '.analyzers/tmp'
          Get-ChildItem -Path '.analyzers/tmp' -Filter '*.dll' -Recurse | Move-Item -Destination '.analyzers' -Force
          Remove-Item -Path '.analyzers/tmp' -Recurse -Force

      ###############################
      # Run prebuild command        #
      ###############################
      - if: ${{ inputs.prebuild_command != '' }}
        name: Run prebuild command
        run: ${{ inputs.prebuild_command }}

      ###############################
      # Build, test, report results #
      ###############################
      - name: Build
        run: dotnet build

      - name: Write .editorconfig
        run: |
          $file = Get-ChildItem -Path . -Include 'FrendsTaskMetadata.json' -Recurse | select -First 1
          $contents = Get-Content $file -Raw -Encoding UTF8
          $contents = $contents.Trim()
          $json = $contents | ConvertFrom-Json
          $methods = $json.Tasks | Join-String -Property TaskMethod -Separator ';'
          $lines = @"
          [*.cs]
          frends_task_analyzers.task_methods = $methods
          "@
          Add-Content -Path .editorconfig -Value $lines

      - name: Format
        run: |
          dotnet format `
            --verify-no-changes `
            --verbosity detailed
        continue-on-error: ${{ !inputs.strict_analyzers }}

      - name: Lint
        run: |
          roslynator analyze `
            --analyzer-assemblies '.analyzers' `
            --verbosity detailed
        continue-on-error: ${{ !inputs.strict_analyzers }}

      - name: Cleanup after analyzers
        run: |
          git ls-files --error-unmatch .editorconfig 2>&1 > $null
          if ($?)
          {
            git restore .editorconfig
          }
          else
          {
            Remove-Item -Path '.editorconfig' -Force -ErrorAction SilentlyContinue
          }
          Remove-Item -Path '.analyzers' -Recurse -Force -ErrorAction SilentlyContinue

      - name: Test
        run: dotnet test --collect:"XPlat Code Coverage"

      - id: code_coverage
        name: Check code coverage
        run: |
          $file = Get-ChildItem -Path . -Include 'coverage.cobertura.xml' -Recurse
          $lineRate = [double](Select-Xml -XPath '//coverage/@line-rate' $file).Node.Value
          $lineRatePct = [Math]::Round($lineRate * 100)
          if ($lineRatePct -lt 80)
          {
            echo "## Test coverage failed :x:" >> $env:GITHUB_STEP_SUMMARY
            echo "**Line coverage:** $lineRatePct% | **Required:** 80%" >> $env:GITHUB_STEP_SUMMARY
            exit 1
          }
          else
          {
            echo "## Test coverage passed :white_check_mark:" >> $env:GITHUB_STEP_SUMMARY
            echo "**Line coverage:** $lineRatePct%" >> $env:GITHUB_STEP_SUMMARY
            echo "coverage=$lineRatePct" >> $GITHUB_OUTPUT
          }

      - name: Pack
        run: dotnet pack --configuration Release --include-source

      - name: Save coverage report
        run: |
          $badgeKey = "${{ github.repository }}|${{ github.ref_name }}"
          if ("${{ inputs.workdir }}" -ne ".")
          {
            $badgeKey = "${{ github.repository }}/${{ inputs.workdir }}|${{ github.ref_name }}"
          }
          $json = @{
            key = $badgeKey
            displayName = "Coverage"
            value = "${{ steps.code_coverage.outputs.coverage }}%"
          } | ConvertTo-Json -Compress
          Invoke-WebRequest `
              -Method POST `
              -ContentType "application/json" `
              -Headers @{ "x-api-key" = "${{ secrets.badge_service_api_key }}" } `
              -Body $json `
              https://app-github-custom-badges.azurewebsites.net/Badge

    ### WE ARE NOT PUSHING / CREATING RELEASE IMMEDIATELY ###
    ### USE release.yml TO CREATE THE RELEASE AND PUSH    ###
